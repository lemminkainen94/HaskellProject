

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype Logical = Logical String deriving (Eq, Ord, Show, Read)
data Program = Prog ProgramHeading DeclarationPart StatementPart
  deriving (Eq, Ord, Show, Read)

data ProgramHeading = ProgHead Ident
  deriving (Eq, Ord, Show, Read)

data DeclarationPart
    = DeclPart TypeDefinitionPart VariableDeclarationPart FunctionDeclarationPart
  deriving (Eq, Ord, Show, Read)

data TypeDefinitionPart
    = TypeDefPartEmpty | TypeDefPart [RecordDefinition]
  deriving (Eq, Ord, Show, Read)

data RecordDefinition = RecDef Ident [Field]
  deriving (Eq, Ord, Show, Read)

data Field = IntRecFld [Ident] | LogicRecFld [Ident]
  deriving (Eq, Ord, Show, Read)

data VariableDeclarationPart
    = VarDeclPartEmpty | VarDeclPart [VariableDeclaration]
  deriving (Eq, Ord, Show, Read)

data VariableDeclaration = VarDecl Type Ident
  deriving (Eq, Ord, Show, Read)

data FunctionDeclarationPart = FunDeclPart [FunctionDeclaration]
  deriving (Eq, Ord, Show, Read)

data FunctionDeclaration = FunDecl FunctionHeading FunctionBody
  deriving (Eq, Ord, Show, Read)

data FunctionHeading = FunHead Ident FormalParameterList Type
  deriving (Eq, Ord, Show, Read)

data FormalParameterList = FormalParamList [FormalParameterSection]
  deriving (Eq, Ord, Show, Read)

data FormalParameterSection
    = ValParamSect Type Ident | VarParamSect Type Ident
  deriving (Eq, Ord, Show, Read)

data FunctionBody
    = FunBody VariableDeclarationPart FunctionStatementPart
  deriving (Eq, Ord, Show, Read)

data FunctionStatementPart
    = FunStmtPart [Statement] ReturnStatement
  deriving (Eq, Ord, Show, Read)

data ReturnStatement = RetStmtEmpty | RetStmt Exp
  deriving (Eq, Ord, Show, Read)

data StatementPart = StmtPart [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = ExpStmt Exp
    | PrintStmt Exp
    | AssignStmt Variable Exp
    | WhileStmt Exp [Statement]
    | ForToStmt Ident Exp Exp [Statement]
    | ForDowntoStmt Ident Exp Exp [Statement]
    | IfStmt Exp [Statement]
    | IfElseStmt Exp [Statement] [Statement]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EOr Exp Exp
    | EAnd Exp Exp
    | ELess Exp Exp
    | EGreater Exp Exp
    | ELessEqual Exp Exp
    | EGreaterEqual Exp Exp
    | EEqual Exp Exp
    | ENonEqual Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EMin Exp
    | ENot Exp
    | EVar Variable
    | EFun Ident [Exp]
    | EInt Integer
    | ELogic Logical
  deriving (Eq, Ord, Show, Read)

data Variable
    = Var Ident | ArrayVariable Ident Exp | FieldDes Ident Ident
  deriving (Eq, Ord, Show, Read)

data Type
    = IntType
    | LogicType
    | IntArrayType Integer
    | LogicArrayType Integer
    | RecordType Ident
    | VoidType
  deriving (Eq, Ord, Show, Read)

