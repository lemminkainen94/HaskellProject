{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

instance Print Logical where
  prt _ (Logical i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Prog programheading declarationpart statementpart -> prPrec i 0 (concatD [prt 0 programheading, prt 0 declarationpart, prt 0 statementpart, doc (showString ".")])

instance Print ProgramHeading where
  prt i e = case e of
    ProgHead id -> prPrec i 0 (concatD [doc (showString "program"), prt 0 id, doc (showString ";")])

instance Print DeclarationPart where
  prt i e = case e of
    DeclPart typedefinitionpart variabledeclarationpart functiondeclarationpart -> prPrec i 0 (concatD [prt 0 typedefinitionpart, prt 0 variabledeclarationpart, prt 0 functiondeclarationpart])

instance Print TypeDefinitionPart where
  prt i e = case e of
    TypeDefPartEmpty -> prPrec i 0 (concatD [])
    TypeDefPart recorddefinitions -> prPrec i 0 (concatD [doc (showString "type"), prt 0 recorddefinitions])

instance Print RecordDefinition where
  prt i e = case e of
    RecDef id fields -> prPrec i 0 (concatD [doc (showString "record"), prt 0 id, prt 0 fields, doc (showString "end")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Field where
  prt i e = case e of
    IntRecFld ids -> prPrec i 0 (concatD [doc (showString "int"), prt 0 ids])
    LogicRecFld ids -> prPrec i 0 (concatD [doc (showString "bool"), prt 0 ids])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print VariableDeclarationPart where
  prt i e = case e of
    VarDeclPartEmpty -> prPrec i 0 (concatD [])
    VarDeclPart variabledeclarations -> prPrec i 0 (concatD [doc (showString "var"), prt 0 variabledeclarations])

instance Print VariableDeclaration where
  prt i e = case e of
    VarDecl type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print FunctionDeclarationPart where
  prt i e = case e of
    FunDeclPart functiondeclarations -> prPrec i 0 (concatD [prt 0 functiondeclarations])

instance Print FunctionDeclaration where
  prt i e = case e of
    FunDecl functionheading functionbody -> prPrec i 0 (concatD [prt 0 functionheading, doc (showString ";"), prt 0 functionbody])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print FunctionHeading where
  prt i e = case e of
    FunHead id formalparameterlist type_ -> prPrec i 0 (concatD [doc (showString "function"), prt 0 id, prt 0 formalparameterlist, doc (showString ":"), prt 0 type_])

instance Print FormalParameterList where
  prt i e = case e of
    FormalParamList formalparametersections -> prPrec i 0 (concatD [doc (showString "("), prt 0 formalparametersections, doc (showString ")")])

instance Print FormalParameterSection where
  prt i e = case e of
    ValParamSect type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    VarParamSect type_ id -> prPrec i 0 (concatD [doc (showString "var"), prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FunctionBody where
  prt i e = case e of
    FunBody variabledeclarationpart functionstatementpart -> prPrec i 0 (concatD [prt 0 variabledeclarationpart, prt 0 functionstatementpart])

instance Print FunctionStatementPart where
  prt i e = case e of
    FunStmtPart statements returnstatement -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 statements, prt 0 returnstatement, doc (showString "end")])

instance Print ReturnStatement where
  prt i e = case e of
    RetStmtEmpty -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    RetStmt exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])

instance Print StatementPart where
  prt i e = case e of
    StmtPart statements -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 statements, doc (showString "end")])

instance Print Statement where
  prt i e = case e of
    ExpStmt exp -> prPrec i 0 (concatD [prt 0 exp])
    PrintStmt exp -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 exp, doc (showString ")")])
    AssignStmt variable exp -> prPrec i 0 (concatD [prt 0 variable, doc (showString "="), prt 0 exp])
    WhileStmt exp statements -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, doc (showString "do"), prt 0 statements])
    ForToStmt id exp1 exp2 statements -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "="), prt 0 exp1, doc (showString "to"), prt 0 exp2, doc (showString "do"), prt 0 statements])
    ForDowntoStmt id exp1 exp2 statements -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "="), prt 0 exp1, doc (showString "downto"), prt 0 exp2, doc (showString "do"), prt 0 statements])
    IfStmt exp statements -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 statements])
    IfElseStmt exp statements1 statements2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 statements1, doc (showString "else"), prt 0 statements2])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Exp where
  prt i e = case e of
    EOr exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "or"), prt 1 exp2])
    EAnd exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "and"), prt 2 exp2])
    ELess exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "<"), prt 3 exp2])
    EGreater exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString ">"), prt 3 exp2])
    ELessEqual exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "<="), prt 3 exp2])
    EGreaterEqual exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString ">="), prt 3 exp2])
    EEqual exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "=="), prt 3 exp2])
    ENonEqual exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "<>"), prt 3 exp2])
    EAdd exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "+"), prt 4 exp2])
    ESub exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "-"), prt 4 exp2])
    EMul exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "*"), prt 5 exp2])
    EDiv exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "/"), prt 5 exp2])
    EMod exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "mod"), prt 5 exp2])
    EMin exp -> prPrec i 5 (concatD [doc (showString "-"), prt 5 exp])
    ENot exp -> prPrec i 5 (concatD [doc (showString "not"), prt 5 exp])
    EVar variable -> prPrec i 5 (concatD [prt 0 variable])
    EFun id exps -> prPrec i 5 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    EInt n -> prPrec i 5 (concatD [prt 0 n])
    ELogic logical -> prPrec i 5 (concatD [prt 0 logical])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Variable where
  prt i e = case e of
    Var id -> prPrec i 0 (concatD [prt 0 id])
    ArrayVariable id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 0 exp, doc (showString "]")])
    FieldDes id1 id2 -> prPrec i 0 (concatD [prt 0 id1, doc (showString "."), prt 0 id2])

instance Print Type where
  prt i e = case e of
    IntType -> prPrec i 0 (concatD [doc (showString "int")])
    LogicType -> prPrec i 0 (concatD [doc (showString "bool")])
    IntArrayType n -> prPrec i 0 (concatD [doc (showString "int"), doc (showString "array"), doc (showString "["), prt 0 n, doc (showString "]")])
    LogicArrayType n -> prPrec i 0 (concatD [doc (showString "bool"), doc (showString "array"), doc (showString "["), prt 0 n, doc (showString "]")])
    RecordType id -> prPrec i 0 (concatD [prt 0 id])
    VoidType -> prPrec i 0 (concatD [doc (showString "void")])


