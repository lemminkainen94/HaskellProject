module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transLogical :: Logical -> Result
transLogical x = case x of
  Logical string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog programheading declarationpart statementpart -> failure x
transProgramHeading :: ProgramHeading -> Result
transProgramHeading x = case x of
  ProgHead ident -> failure x
transDeclarationPart :: DeclarationPart -> Result
transDeclarationPart x = case x of
  DeclPart typedefinitionpart variabledeclarationpart functiondeclarationpart -> failure x
transTypeDefinitionPart :: TypeDefinitionPart -> Result
transTypeDefinitionPart x = case x of
  TypeDefPartEmpty -> failure x
  TypeDefPart recorddefinitions -> failure x
transRecordDefinition :: RecordDefinition -> Result
transRecordDefinition x = case x of
  RecDef ident fields -> failure x
transField :: Field -> Result
transField x = case x of
  IntRecFld idents -> failure x
  LogicRecFld idents -> failure x
transVariableDeclarationPart :: VariableDeclarationPart -> Result
transVariableDeclarationPart x = case x of
  VarDeclPartEmpty -> failure x
  VarDeclPart variabledeclarations -> failure x
transVariableDeclaration :: VariableDeclaration -> Result
transVariableDeclaration x = case x of
  VarDecl type_ ident -> failure x
transFunctionDeclarationPart :: FunctionDeclarationPart -> Result
transFunctionDeclarationPart x = case x of
  FunDeclPart functiondeclarations -> failure x
transFunctionDeclaration :: FunctionDeclaration -> Result
transFunctionDeclaration x = case x of
  FunDecl functionheading functionbody -> failure x
transFunctionHeading :: FunctionHeading -> Result
transFunctionHeading x = case x of
  FunHead ident formalparameterlist type_ -> failure x
transFormalParameterList :: FormalParameterList -> Result
transFormalParameterList x = case x of
  FormalParamList formalparametersections -> failure x
transFormalParameterSection :: FormalParameterSection -> Result
transFormalParameterSection x = case x of
  ValParamSect type_ ident -> failure x
  VarParamSect type_ ident -> failure x
transFunctionBody :: FunctionBody -> Result
transFunctionBody x = case x of
  FunBody variabledeclarationpart functionstatementpart -> failure x
transFunctionStatementPart :: FunctionStatementPart -> Result
transFunctionStatementPart x = case x of
  FunStmtPart statements returnstatement -> failure x
transReturnStatement :: ReturnStatement -> Result
transReturnStatement x = case x of
  RetStmtEmpty -> failure x
  RetStmt exp -> failure x
transStatementPart :: StatementPart -> Result
transStatementPart x = case x of
  StmtPart statements -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  ExpStmt exp -> failure x
  PrintStmt exp -> failure x
  AssignStmt variable exp -> failure x
  WhileStmt exp statements -> failure x
  ForToStmt ident exp1 exp2 statements -> failure x
  ForDowntoStmt ident exp1 exp2 statements -> failure x
  IfStmt exp statements -> failure x
  IfElseStmt exp statements1 statements2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  ELess exp1 exp2 -> failure x
  EGreater exp1 exp2 -> failure x
  ELessEqual exp1 exp2 -> failure x
  EGreaterEqual exp1 exp2 -> failure x
  EEqual exp1 exp2 -> failure x
  ENonEqual exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EMin exp -> failure x
  ENot exp -> failure x
  EVar variable -> failure x
  EFun ident exps -> failure x
  EInt integer -> failure x
  ELogic logical -> failure x
transVariable :: Variable -> Result
transVariable x = case x of
  Var ident -> failure x
  ArrayVariable ident exp -> failure x
  FieldDes ident1 ident2 -> failure x
transType :: Type -> Result
transType x = case x of
  IntType -> failure x
  LogicType -> failure x
  IntArrayType integer -> failure x
  LogicArrayType integer -> failure x
  RecordType ident -> failure x
  VoidType -> failure x

